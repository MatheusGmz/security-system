{"ast":null,"code":"export default class Mask {\n  /**\r\n   * Removes the mask form the text\r\n   * @param {String} text - Text that will be unmasked \r\n   * @returns {String} Unmasked text\r\n   */\n  static unmask(text) {\n    return text.replace(/\\./g, \"\").replace(/-/g, \"\").replace(/\\//g, \"\").replace(/\\(/g, \"\").replace(/\\)/g, \"\").replace(/:/g, \"\").replace(/ /g, \"\").replace(/,/g, \"\");\n  }\n  /**\r\n   * Apply a mask on the text\r\n   * @param {String} mask - Mask to be applied\r\n   * @param {String} text - Text to apply mask\r\n   * @returns {String} Masked text\r\n   */\n\n\n  static applyMask(mask, text) {\n    if (mask && mask.length > 0 && text && text.length > 0) {\n      text = this.unmask(text);\n      let out = \"\";\n      let i = 0;\n      let j = 0;\n\n      while (i < mask.length && j < text.length) {\n        if (mask[i] === '#') {\n          out += text[j];\n          j++;\n        } else {\n          out += mask[i];\n        }\n\n        i++;\n      }\n\n      return out;\n    }\n\n    return text;\n  }\n  /**\r\n   * Apply a generic phone mask on the text\r\n   * @param {String} text Text to apply mask\r\n   * @returns {String} Masked text\r\n   */\n\n\n  static genericPhoneMask(text) {\n    if (text.length <= this.MASK_PHONE.length) {\n      return this.applyMask(this.MASK_PHONE, text);\n    } else {\n      return this.applyMask(this.MASK_CELLPHONE, text);\n    }\n  }\n  /**\r\n   * Apply a cpf or cnpj mask, depending on the length of the text\r\n   * @param {String} text Text to apply mask \r\n   * @returns {String} Masked text\r\n   */\n\n\n  static formatCpfCnpj(text) {\n    if (text.length <= this.MASK_CPF.length) {\n      return this.applyMask(this.MASK_CPF, text);\n    } else {\n      return this.applyMask(this.MASK_CNPJ, text);\n    }\n  }\n  /**\r\n   * Apply a decimal mask\r\n   * @param {String} text Text to apply mask \r\n   * @param {String} prefix Prefix of the decimal \r\n   * @param {Number} limit limit the decimal to certain number \r\n   * @returns {String} Masked text\r\n   */\n\n\n  static formatDecimal(value, prefix = \"\", limit = null) {\n    value = this.unmaskDecimal(value, prefix, limit);\n    value = value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n\n    if (prefix) {\n      value = `${prefix} ${value}`;\n    }\n\n    return `${value.substring(0, value.length - 3)},${value.substring(value.length - 2, value.length)}`;\n  }\n  /**\r\n   * Remove decimal mask\r\n   * @param {String} text Text to apply mask \r\n   * @param {String} prefix Prefix of the decimal \r\n   * @param {Number} limit limit the decimal to certain number \r\n   * @returns {String} Unmasked text\r\n   */\n\n\n  static unmaskDecimal(value, prefix = \"\", limit = null) {\n    value = this.unmask(value.replace(prefix, \"\").replace(\"^0+\", \"\"));\n    value = Number(value);\n\n    if (isNaN(value)) {\n      value = 0;\n    }\n\n    value = (value / 100).toFixed(2);\n\n    if (limit && value > limit) {\n      value = limit.toFixed(2);\n    }\n\n    return value;\n  }\n\n}\nMask.MASK_UF = \"##\";\nMask.MASK_HOUR = \"##:##\";\nMask.MASK_DATE = \"##/##/####\";\nMask.MASK_DATE_HOUR = \"##/##/#### ##:##\";\nMask.MASK_PHONE = \"(##) ####-####\";\nMask.MASK_CELLPHONE = \"(##) #####-####\";\nMask.MASK_RG = \"##.###.###\";\nMask.MASK_CPF = \"###.###.###-##\";\nMask.MASK_CNPJ = \"##.###.###/####-##\";\nMask.MASK_POSTAL_CODE = \"#####-###\";\nMask.MASK_CARD = \"#### #### #### ####\";\nMask.MASK_EXPIRE_DATE = \"##/####\";\nMask.MASK_CVV = \"###\";","map":{"version":3,"sources":["C:/git/matt-repository/security-system/template-reactjs/src/module/Mask.js"],"names":["Mask","unmask","text","replace","applyMask","mask","length","out","i","j","genericPhoneMask","MASK_PHONE","MASK_CELLPHONE","formatCpfCnpj","MASK_CPF","MASK_CNPJ","formatDecimal","value","prefix","limit","unmaskDecimal","substring","Number","isNaN","toFixed","MASK_UF","MASK_HOUR","MASK_DATE","MASK_DATE_HOUR","MASK_RG","MASK_POSTAL_CODE","MASK_CARD","MASK_EXPIRE_DATE","MASK_CVV"],"mappings":"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","sourcesContent":["export default class Mask{\r\n    static MASK_UF = \"##\";\r\n    static MASK_HOUR = \"##:##\";\r\n    static MASK_DATE = \"##/##/####\";\r\n    static MASK_DATE_HOUR = \"##/##/#### ##:##\";\r\n    static MASK_PHONE = \"(##) ####-####\";\r\n    static MASK_CELLPHONE = \"(##) #####-####\";\r\n    static MASK_RG = \"##.###.###\";\r\n    static MASK_CPF = \"###.###.###-##\";\r\n    static MASK_CNPJ = \"##.###.###/####-##\";\r\n    static MASK_POSTAL_CODE = \"#####-###\";\r\n    static MASK_CARD = \"#### #### #### ####\";\r\n    static MASK_EXPIRE_DATE = \"##/####\";\r\n    static MASK_CVV = \"###\";\r\n\r\n    /**\r\n     * Removes the mask form the text\r\n     * @param {String} text - Text that will be unmasked \r\n     * @returns {String} Unmasked text\r\n     */\r\n    static unmask(text) {\r\n        return text.replace(/\\./g, \"\").replace(/-/g, \"\")\r\n                .replace(/\\//g, \"\").replace(/\\(/g, \"\")\r\n                .replace(/\\)/g, \"\").replace(/:/g, \"\")\r\n                .replace(/ /g, \"\").replace(/,/g, \"\");\r\n    }\r\n\r\n    /**\r\n     * Apply a mask on the text\r\n     * @param {String} mask - Mask to be applied\r\n     * @param {String} text - Text to apply mask\r\n     * @returns {String} Masked text\r\n     */\r\n    static applyMask(mask, text){\r\n        if(mask && mask.length > 0 && text && text.length > 0) {\r\n            text = this.unmask(text);\r\n            let out = \"\";\r\n            let i = 0;\r\n            let j = 0;\r\n            while (i < mask.length && j < text.length) {\r\n                if (mask[i] === '#') {\r\n                    out += text[j];\r\n                    j++;\r\n                } else {\r\n                    out += mask[i];\r\n                }\r\n                i++;\r\n            }\r\n            return out;\r\n        }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Apply a generic phone mask on the text\r\n     * @param {String} text Text to apply mask\r\n     * @returns {String} Masked text\r\n     */\r\n    static genericPhoneMask(text){\r\n        if(text.length <= this.MASK_PHONE.length) {\r\n            return this.applyMask(this.MASK_PHONE, text);\r\n        } else {\r\n            return this.applyMask(this.MASK_CELLPHONE, text);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply a cpf or cnpj mask, depending on the length of the text\r\n     * @param {String} text Text to apply mask \r\n     * @returns {String} Masked text\r\n     */\r\n    static formatCpfCnpj(text){\r\n        if(text.length <= this.MASK_CPF.length) {\r\n            return this.applyMask(this.MASK_CPF, text);\r\n        } else {\r\n            return this.applyMask(this.MASK_CNPJ, text);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Apply a decimal mask\r\n     * @param {String} text Text to apply mask \r\n     * @param {String} prefix Prefix of the decimal \r\n     * @param {Number} limit limit the decimal to certain number \r\n     * @returns {String} Masked text\r\n     */    \r\n    static formatDecimal(value, prefix = \"\", limit = null) {\r\n        value = this.unmaskDecimal(value, prefix, limit);\r\n        value = value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\r\n        if(prefix){\r\n            value = `${prefix} ${value}`;\r\n        }\r\n        return `${value.substring(0, value.length - 3)},${value.substring(value.length-2, value.length)}`;\r\n    }\r\n\r\n    /**\r\n     * Remove decimal mask\r\n     * @param {String} text Text to apply mask \r\n     * @param {String} prefix Prefix of the decimal \r\n     * @param {Number} limit limit the decimal to certain number \r\n     * @returns {String} Unmasked text\r\n     */\r\n    static unmaskDecimal(value, prefix = \"\", limit = null) {\r\n        value = this.unmask(value.replace(prefix, \"\").replace(\"^0+\", \"\"));\r\n        value = Number(value);\r\n        if(isNaN(value)){\r\n            value = 0;\r\n        }\r\n        value = (value/100).toFixed(2);\r\n        if(limit && (value > limit)){\r\n            value = limit.toFixed(2);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}