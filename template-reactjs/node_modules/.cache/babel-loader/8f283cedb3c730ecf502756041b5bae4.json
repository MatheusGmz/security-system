{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nexport default class Encryption {\n  static encryptByTDES(text, salt) {\n    if (text === null) return null;\n    if (text === \"\") return \"\"; // transforma o json em um array de bytes\n\n    var DataToEncrypt = CryptoJS.enc.Utf8.parse(text); // transforma a chave em um array de bytes usando Utf8 e depois cria uma hash em MD5\n    // como a hash só tem 16 bytes é necessário usar os 8 primeiros bytes e concatenar no final para formar 24 bytes\n\n    var TDESKey = CryptoJS.MD5(CryptoJS.enc.Utf8.parse(salt));\n    var k1 = TDESKey.words.slice(0, 2);\n    TDESKey.words = TDESKey.words.concat(k1);\n    TDESKey.sigBytes = 24; // encripta o dado\n\n    var encryptedData = CryptoJS.TripleDES.encrypt(DataToEncrypt, TDESKey, {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    }); // retorna o dado no formato de base64\n\n    return encryptedData.toString();\n  }\n\n  static decryptByTDES(ciphertext, salt) {\n    // passa o dado em base64 para um array de bytes\n    var dataToDecrypt = CryptoJS.enc.Base64.parse(ciphertext); // transforma a chave em um array de bytes usando Utf8 e depois cria uma hash em MD5 \n    // como a hash só tem 16 bytes é necessário usar os 8 primeiros bytes e concatenar no final para formar 24 bytes      \n\n    var TDESKey = CryptoJS.MD5(CryptoJS.enc.Utf8.parse(salt));\n    var k1 = TDESKey.words.slice(0, 2);\n    TDESKey.words = TDESKey.words.concat(k1);\n    TDESKey.sigBytes = 24;\n\n    try {\n      // decripta o dado\n      var decryptedData = CryptoJS.TripleDES.decrypt({\n        ciphertext: dataToDecrypt\n      }, TDESKey, {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      }); // retorna o dato em formato json\n\n      var result = CryptoJS.enc.Utf8.stringify(decryptedData);\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static encryptByAES(text, salt) {\n    if (text === null) return null;\n    if (text === \"\") return \"\"; // transforma o json em um array de bytes\n\n    var dataToEncrypt = CryptoJS.enc.Utf8.parse(text); // cria uma key de 256 bits em SHA-3 usando o salt\n\n    var key = CryptoJS.SHA3(salt, {\n      outputLength: 256\n    }); // cria uma iv em Hex usando o salt\n\n    var iv = CryptoJS.enc.Hex.parse(salt); // encripta o dado em AES\n\n    var encrypted = CryptoJS.AES.encrypt(dataToEncrypt, key, {\n      iv: iv\n    }); // retorna o dado no formato de base64\n\n    return encrypted.toString();\n  }\n\n  static decryptByAES(ciphertext, salt) {\n    // passa o dado em base64 para um array de bytes\n    var dataToDecrypt = CryptoJS.enc.Base64.parse(ciphertext); // cria uma key de 256 bits em SHA-3 usando o salt\n\n    var key = CryptoJS.SHA3(salt, {\n      outputLength: 256\n    }); // cria uma iv em Hex usando o salt\n\n    var iv = CryptoJS.enc.Hex.parse(salt);\n\n    try {\n      // descripta o dado em AES       \n      var decrypted = CryptoJS.AES.decrypt({\n        ciphertext: dataToDecrypt\n      }, key, {\n        iv: iv\n      }); // retorna o dato em formato json   \n\n      var result = CryptoJS.enc.Utf8.stringify(decrypted);\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static readImageAsDataURL(file) {\n    var fileReader = new FileReader();\n\n    fileReader.onload = e => {\n      return e.target.result;\n    };\n\n    fileReader.readAsDataURL(file);\n  }\n\n}","map":{"version":3,"sources":["C:/git/matt-repository/security-system/template-reactjs/src/module/Encryption.js"],"names":["CryptoJS","Encryption","encryptByTDES","text","salt","DataToEncrypt","enc","Utf8","parse","TDESKey","MD5","k1","words","slice","concat","sigBytes","encryptedData","TripleDES","encrypt","mode","ECB","padding","pad","Pkcs7","toString","decryptByTDES","ciphertext","dataToDecrypt","Base64","decryptedData","decrypt","result","stringify","e","encryptByAES","dataToEncrypt","key","SHA3","outputLength","iv","Hex","encrypted","AES","decryptByAES","decrypted","readImageAsDataURL","file","fileReader","FileReader","onload","target","readAsDataURL"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,eAAe,MAAMC,UAAN,CAAgB;AAE3B,SAAOC,aAAP,CAAqBC,IAArB,EAA2BC,IAA3B,EAAgC;AAC5B,QAAID,IAAI,KAAK,IAAb,EACI,OAAO,IAAP;AACJ,QAAIA,IAAI,KAAK,EAAb,EACI,OAAO,EAAP,CAJwB,CAK5B;;AACA,QAAIE,aAAa,GAAGL,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBL,IAAxB,CAApB,CAN4B,CAO5B;AACA;;AACA,QAAIM,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAaV,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBJ,IAAxB,CAAb,CAAd;AACA,QAAIO,EAAE,GAAGF,OAAO,CAACG,KAAR,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAT;AACAJ,IAAAA,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACG,KAAR,CAAcE,MAAd,CAAqBH,EAArB,CAAhB;AACAF,IAAAA,OAAO,CAACM,QAAR,GAAmB,EAAnB,CAZ4B,CAa5B;;AACA,QAAIC,aAAa,GAAGhB,QAAQ,CAACiB,SAAT,CAAmBC,OAAnB,CAA2Bb,aAA3B,EAA0CI,OAA1C,EAAmD;AAACU,MAAAA,IAAI,EAAEnB,QAAQ,CAACmB,IAAT,CAAcC,GAArB;AAA0BC,MAAAA,OAAO,EAAErB,QAAQ,CAACsB,GAAT,CAAaC;AAAhD,KAAnD,CAApB,CAd4B,CAe5B;;AACA,WAAOP,aAAa,CAACQ,QAAd,EAAP;AACH;;AAED,SAAOC,aAAP,CAAqBC,UAArB,EAAiCtB,IAAjC,EAAsC;AAClC;AACA,QAAIuB,aAAa,GAAG3B,QAAQ,CAACM,GAAT,CAAasB,MAAb,CAAoBpB,KAApB,CAA0BkB,UAA1B,CAApB,CAFkC,CAGlC;AACA;;AACA,QAAIjB,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAaV,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBJ,IAAxB,CAAb,CAAd;AACA,QAAIO,EAAE,GAAGF,OAAO,CAACG,KAAR,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAT;AACAJ,IAAAA,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACG,KAAR,CAAcE,MAAd,CAAqBH,EAArB,CAAhB;AACAF,IAAAA,OAAO,CAACM,QAAR,GAAmB,EAAnB;;AACA,QAAG;AACC;AACA,UAAIc,aAAa,GAAG7B,QAAQ,CAACiB,SAAT,CAAmBa,OAAnB,CAA2B;AAACJ,QAAAA,UAAU,EAAEC;AAAb,OAA3B,EAAwDlB,OAAxD,EAAiE;AAACU,QAAAA,IAAI,EAAEnB,QAAQ,CAACmB,IAAT,CAAcC,GAArB;AAA0BC,QAAAA,OAAO,EAAErB,QAAQ,CAACsB,GAAT,CAAaC;AAAhD,OAAjE,CAApB,CAFD,CAGC;;AACA,UAAIQ,MAAM,GAAG/B,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkByB,SAAlB,CAA4BH,aAA5B,CAAb;AACA,aAAOE,MAAP;AACH,KAND,CAOA,OAAME,CAAN,EAAQ;AACJ,aAAO,KAAP;AACH;AACJ;;AAED,SAAOC,YAAP,CAAoB/B,IAApB,EAA0BC,IAA1B,EAA+B;AAC3B,QAAID,IAAI,KAAK,IAAb,EACI,OAAO,IAAP;AACJ,QAAIA,IAAI,KAAK,EAAb,EACI,OAAO,EAAP,CAJuB,CAK3B;;AACA,QAAIgC,aAAa,GAAGnC,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBL,IAAxB,CAApB,CAN2B,CAO3B;;AACA,QAAIiC,GAAG,GAAGpC,QAAQ,CAACqC,IAAT,CAAcjC,IAAd,EAAoB;AAAEkC,MAAAA,YAAY,EAAE;AAAhB,KAApB,CAAV,CAR2B,CAS3B;;AACA,QAAIC,EAAE,GAAGvC,QAAQ,CAACM,GAAT,CAAakC,GAAb,CAAiBhC,KAAjB,CAAuBJ,IAAvB,CAAT,CAV2B,CAW3B;;AACA,QAAIqC,SAAS,GAAGzC,QAAQ,CAAC0C,GAAT,CAAaxB,OAAb,CAAqBiB,aAArB,EAAoCC,GAApC,EAAyC;AAACG,MAAAA,EAAE,EAAEA;AAAL,KAAzC,CAAhB,CAZ2B,CAa3B;;AACA,WAAOE,SAAS,CAACjB,QAAV,EAAP;AACH;;AAED,SAAOmB,YAAP,CAAoBjB,UAApB,EAAgCtB,IAAhC,EAAqC;AACjC;AACA,QAAIuB,aAAa,GAAG3B,QAAQ,CAACM,GAAT,CAAasB,MAAb,CAAoBpB,KAApB,CAA0BkB,UAA1B,CAApB,CAFiC,CAGjC;;AACA,QAAIU,GAAG,GAAGpC,QAAQ,CAACqC,IAAT,CAAcjC,IAAd,EAAoB;AAAEkC,MAAAA,YAAY,EAAE;AAAhB,KAApB,CAAV,CAJiC,CAKjC;;AACA,QAAIC,EAAE,GAAGvC,QAAQ,CAACM,GAAT,CAAakC,GAAb,CAAiBhC,KAAjB,CAAuBJ,IAAvB,CAAT;;AACA,QAAG;AACC;AACA,UAAIwC,SAAS,GAAG5C,QAAQ,CAAC0C,GAAT,CAAaZ,OAAb,CAAqB;AAACJ,QAAAA,UAAU,EAAEC;AAAb,OAArB,EAAkDS,GAAlD,EAAuD;AAACG,QAAAA,EAAE,EAAEA;AAAL,OAAvD,CAAhB,CAFD,CAGC;;AACA,UAAIR,MAAM,GAAG/B,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkByB,SAAlB,CAA4BY,SAA5B,CAAb;AACA,aAAOb,MAAP;AACH,KAND,CAOA,OAAME,CAAN,EAAQ;AACJ,aAAO,KAAP;AACH;AACJ;;AAED,SAAOY,kBAAP,CAA0BC,IAA1B,EAA+B;AAC3B,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;;AACAD,IAAAA,UAAU,CAACE,MAAX,GAAqBhB,CAAD,IAAO;AACvB,aAAOA,CAAC,CAACiB,MAAF,CAASnB,MAAhB;AACH,KAFD;;AAGAgB,IAAAA,UAAU,CAACI,aAAX,CAAyBL,IAAzB;AACH;;AApF0B","sourcesContent":["import CryptoJS from \"crypto-js\";\r\n\r\nexport default class Encryption{\r\n\r\n    static encryptByTDES(text, salt){\r\n        if (text === null)\r\n            return null;\r\n        if (text === \"\")\r\n            return \"\";\r\n        // transforma o json em um array de bytes\r\n        var DataToEncrypt = CryptoJS.enc.Utf8.parse(text);\r\n        // transforma a chave em um array de bytes usando Utf8 e depois cria uma hash em MD5\r\n        // como a hash só tem 16 bytes é necessário usar os 8 primeiros bytes e concatenar no final para formar 24 bytes\r\n        var TDESKey = CryptoJS.MD5(CryptoJS.enc.Utf8.parse(salt));\r\n        var k1 = TDESKey.words.slice(0, 2);\r\n        TDESKey.words = TDESKey.words.concat(k1);\r\n        TDESKey.sigBytes = 24;\r\n        // encripta o dado\r\n        var encryptedData = CryptoJS.TripleDES.encrypt(DataToEncrypt, TDESKey, {mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7});\r\n        // retorna o dado no formato de base64\r\n        return encryptedData.toString();        \r\n    }\r\n\r\n    static decryptByTDES(ciphertext, salt){\r\n        // passa o dado em base64 para um array de bytes\r\n        var dataToDecrypt = CryptoJS.enc.Base64.parse(ciphertext)\r\n        // transforma a chave em um array de bytes usando Utf8 e depois cria uma hash em MD5 \r\n        // como a hash só tem 16 bytes é necessário usar os 8 primeiros bytes e concatenar no final para formar 24 bytes      \r\n        var TDESKey = CryptoJS.MD5(CryptoJS.enc.Utf8.parse(salt));\r\n        var k1 = TDESKey.words.slice(0, 2);\r\n        TDESKey.words = TDESKey.words.concat(k1);\r\n        TDESKey.sigBytes = 24;\r\n        try{\r\n            // decripta o dado\r\n            var decryptedData = CryptoJS.TripleDES.decrypt({ciphertext: dataToDecrypt}, TDESKey, {mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7});\r\n            // retorna o dato em formato json\r\n            var result = CryptoJS.enc.Utf8.stringify(decryptedData);\r\n            return result;            \r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static encryptByAES(text, salt){\r\n        if (text === null)\r\n            return null;\r\n        if (text === \"\")\r\n            return \"\";\r\n        // transforma o json em um array de bytes\r\n        var dataToEncrypt = CryptoJS.enc.Utf8.parse(text);\r\n        // cria uma key de 256 bits em SHA-3 usando o salt\r\n        var key = CryptoJS.SHA3(salt, { outputLength: 256 });\r\n        // cria uma iv em Hex usando o salt\r\n        var iv = CryptoJS.enc.Hex.parse(salt);\r\n        // encripta o dado em AES\r\n        var encrypted = CryptoJS.AES.encrypt(dataToEncrypt, key, {iv: iv});\r\n        // retorna o dado no formato de base64\r\n        return encrypted.toString();\r\n    }\r\n\r\n    static decryptByAES(ciphertext, salt){\r\n        // passa o dado em base64 para um array de bytes\r\n        var dataToDecrypt = CryptoJS.enc.Base64.parse(ciphertext);\r\n        // cria uma key de 256 bits em SHA-3 usando o salt\r\n        var key = CryptoJS.SHA3(salt, { outputLength: 256 });\r\n        // cria uma iv em Hex usando o salt\r\n        var iv = CryptoJS.enc.Hex.parse(salt);             \r\n        try{\r\n            // descripta o dado em AES       \r\n            var decrypted = CryptoJS.AES.decrypt({ciphertext: dataToDecrypt}, key, {iv: iv});\r\n            // retorna o dato em formato json   \r\n            var result = CryptoJS.enc.Utf8.stringify(decrypted);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n    }    \r\n\r\n    static readImageAsDataURL(file){\r\n        var fileReader = new FileReader();\r\n        fileReader.onload = (e) => {\r\n            return e.target.result;                \r\n        }       \r\n        fileReader.readAsDataURL(file);\r\n    }  \r\n}"]},"metadata":{},"sourceType":"module"}