{"ast":null,"code":"import Cookie from 'js-cookie';\nimport Encryption from \"./Encryption\";\nexport default class Cookies {\n  //Cookie names\n  //Keys\n\n  /**\r\n   * Create a cookie\r\n   * @param {String} name The name of the cookie\r\n   * @param {Object} data The data to be stored in cookie\r\n   * @param {String} [salt=null] The salt to encrypt the data that will be stored in cookie (opcional)\r\n   * @param {Number} [expires=null] The time (in days) to expire the cookie (opcional)\r\n   * @returns {Boolean} If the cookie was stored successfully\r\n   */\n  static createCookie(name, data, expires = null, salt = null) {\n    if (!data) {\n      return false;\n    }\n\n    try {\n      data = JSON.stringify(data);\n\n      if (salt) {\n        var encryptedData = Encryption.encryptByAES(data, salt);\n\n        if (encryptedData) {\n          Cookie.set(name, encryptedData, {\n            expires\n          });\n        } else {\n          return false;\n        }\n      } else {\n        Cookie.set(name, data, {\n          expires\n        });\n      }\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\r\n   * Get a cookie\r\n   * @param {String} name The name of the cookie\r\n   * @param {String} [salt=null] The salt to decrypt the data (opcional)\r\n   * @returns {Object} The cookie data\r\n   */\n\n\n  static getCookie(name, salt = null) {\n    try {\n      let data = Cookie.get(name);\n\n      if (data) {\n        if (salt) {\n          data = Encryption.decryptByAES(data, salt);\n\n          if (data) {\n            return JSON.parse(data);\n          } else {\n            Cookie.remove(name);\n            return null;\n          }\n        } else {\n          return JSON.parse(data);\n        }\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Remove a cookie\r\n   * @param {String} name The name of the cookie\r\n   * @returns {Boolean} If the cookie was removed successfully\r\n   */\n\n\n  static removeCookie(name) {\n    try {\n      Cookie.remove(name);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n}\nCookies.LOGIN_DATA = \"ld\";\nCookies.LOGIN_DATA_KEY = \"ff6bbb646b5211b4c2007c4cd429ac364ea9392c\";","map":{"version":3,"sources":["C:/git/Nova pasta/security-system/template-reactjs/src/module/Cookies.js"],"names":["Cookie","Encryption","Cookies","createCookie","name","data","expires","salt","JSON","stringify","encryptedData","encryptByAES","set","e","getCookie","get","decryptByAES","parse","remove","removeCookie","LOGIN_DATA","LOGIN_DATA_KEY"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzB;AAGA;;AAGA;;;;;;;;AAQA,SAAOC,YAAP,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,OAAO,GAAG,IAA1C,EAAgDC,IAAI,GAAG,IAAvD,EAA6D;AACzD,QAAI,CAACF,IAAL,EAAU;AACN,aAAO,KAAP;AACH;;AACD,QAAG;AACCA,MAAAA,IAAI,GAAGG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAP;;AACA,UAAGE,IAAH,EAAQ;AACJ,YAAIG,aAAa,GAAGT,UAAU,CAACU,YAAX,CAAwBN,IAAxB,EAA8BE,IAA9B,CAApB;;AACA,YAAGG,aAAH,EAAiB;AACbV,UAAAA,MAAM,CAACY,GAAP,CAAWR,IAAX,EAAiBM,aAAjB,EAAgC;AAAEJ,YAAAA;AAAF,WAAhC;AACH,SAFD,MAEO;AACH,iBAAO,KAAP;AACH;AACJ,OAPD,MAOM;AACFN,QAAAA,MAAM,CAACY,GAAP,CAAWR,IAAX,EAAiBC,IAAjB,EAAuB;AAAEC,UAAAA;AAAF,SAAvB;AACH;;AACD,aAAO,IAAP;AACH,KAbD,CAaE,OAAMO,CAAN,EAAQ;AACN,aAAO,KAAP;AACH;AACJ;AAED;;;;;;;;AAMA,SAAOC,SAAP,CAAiBV,IAAjB,EAAuBG,IAAI,GAAG,IAA9B,EAAoC;AAChC,QAAG;AACC,UAAIF,IAAI,GAAGL,MAAM,CAACe,GAAP,CAAWX,IAAX,CAAX;;AACA,UAAGC,IAAH,EAAQ;AACJ,YAAGE,IAAH,EAAQ;AACJF,UAAAA,IAAI,GAAGJ,UAAU,CAACe,YAAX,CAAwBX,IAAxB,EAA8BE,IAA9B,CAAP;;AACA,cAAGF,IAAH,EAAQ;AACJ,mBAAOG,IAAI,CAACS,KAAL,CAAWZ,IAAX,CAAP;AACH,WAFD,MAEM;AACFL,YAAAA,MAAM,CAACkB,MAAP,CAAcd,IAAd;AACA,mBAAO,IAAP;AACH;AACJ,SARD,MAQO;AACH,iBAAOI,IAAI,CAACS,KAAL,CAAWZ,IAAX,CAAP;AACH;AACJ,OAZD,MAYM;AACF,eAAO,IAAP;AACH;AACJ,KAjBD,CAiBE,OAAMQ,CAAN,EAAQ;AACN,aAAO,IAAP;AACH;AACJ;AAED;;;;;;;AAKA,SAAOM,YAAP,CAAoBf,IAApB,EAA0B;AACtB,QAAG;AACCJ,MAAAA,MAAM,CAACkB,MAAP,CAAcd,IAAd;AACA,aAAO,IAAP;AACH,KAHD,CAGE,OAAMS,CAAN,EAAQ;AACN,aAAO,KAAP;AACH;AACJ;;AA9EwB;AAARX,O,CAEVkB,U,GAAa,I;AAFHlB,O,CAKVmB,c,GAAiB,0C","sourcesContent":["import Cookie from 'js-cookie';\r\nimport Encryption from \"./Encryption\";\r\n\r\nexport default class Cookies {\r\n    //Cookie names\r\n    static LOGIN_DATA = \"ld\";\r\n\r\n    //Keys\r\n    static LOGIN_DATA_KEY = \"ff6bbb646b5211b4c2007c4cd429ac364ea9392c\";\r\n\r\n    /**\r\n     * Create a cookie\r\n     * @param {String} name The name of the cookie\r\n     * @param {Object} data The data to be stored in cookie\r\n     * @param {String} [salt=null] The salt to encrypt the data that will be stored in cookie (opcional)\r\n     * @param {Number} [expires=null] The time (in days) to expire the cookie (opcional)\r\n     * @returns {Boolean} If the cookie was stored successfully\r\n     */\r\n    static createCookie(name, data, expires = null, salt = null) {\r\n        if (!data){\r\n            return false; \r\n        }\r\n        try{\r\n            data = JSON.stringify(data);\r\n            if(salt){                    \r\n                var encryptedData = Encryption.encryptByAES(data, salt);\r\n                if(encryptedData){\r\n                    Cookie.set(name, encryptedData, { expires });\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else{\r\n                Cookie.set(name, data, { expires }); \r\n            }\r\n            return true;  \r\n        } catch(e){\r\n            return false;\r\n        }              \r\n    }\r\n\r\n    /**\r\n     * Get a cookie\r\n     * @param {String} name The name of the cookie\r\n     * @param {String} [salt=null] The salt to decrypt the data (opcional)\r\n     * @returns {Object} The cookie data\r\n     */\r\n    static getCookie(name, salt = null) {\r\n        try{\r\n            let data = Cookie.get(name);\r\n            if(data){\r\n                if(salt){\r\n                    data = Encryption.decryptByAES(data, salt);            \r\n                    if(data){\r\n                        return JSON.parse(data);\r\n                    } else{\r\n                        Cookie.remove(name);\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    return JSON.parse(data);\r\n                }\r\n            } else{                \r\n                return null;\r\n            }\r\n        } catch(e){\r\n            return null;\r\n        }                   \r\n    }\r\n\r\n    /**\r\n     * Remove a cookie\r\n     * @param {String} name The name of the cookie\r\n     * @returns {Boolean} If the cookie was removed successfully\r\n     */\r\n    static removeCookie(name) {\r\n        try{\r\n            Cookie.remove(name);\r\n            return true;\r\n        } catch(e){\r\n            return false;\r\n        }                    \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}